package com.misys.tiplus2.customisation.entity.persister;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.misys.tiplus2.persistent.EntityPersister;
import com.misys.tiplus2.customisation.entity.ACCOUNT;
import com.misys.tiplus2.customisation.entity.ACCOUNT.Key_ACCOUNT;

@SuppressWarnings("unchecked")
public class ACCOUNTPersister extends EntityPersister {

	// This code will be generated by the builder 
	
	public ACCOUNTPersister() {
		setKeyMembers(new MemberDescriptor[] {
            new MemberDescriptor("acct_key", "ACCOUNT.ACCT_KEY", getBinderFactory().getBinderForType("String")),
		});
			
		setMembers(new MemberDescriptor[] {
            new MemberDescriptor("typeflag", "ACCOUNT.TYPEFLAG", getBinderFactory().getBinderForType("Integer")),
            new MemberDescriptor("tstamp", "ACCOUNT.TSTAMP", getBinderFactory().getBinderForType("Integer")),
            new MemberDescriptor("acc_seqno", "ACCOUNT.ACC_SEQNO", getBinderFactory().getBinderForType("Integer")),
            new MemberDescriptor("acc_type", "ACCOUNT.ACC_TYPE", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("bo_acctno", "ACCOUNT.BO_ACCTNO", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("brch_mnm", "ACCOUNT.BRCH_MNM", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("category", "ACCOUNT.CATEGORY", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("contingent", "ACCOUNT.CONTINGENT", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("country", "ACCOUNT.COUNTRY", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("cus_sbb", "ACCOUNT.CUS_SBB", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("cus_mnm", "ACCOUNT.CUS_MNM", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("dateclosed", "ACCOUNT.DATECLOSED", getBinderFactory().getBinderForType("Date")),
            new MemberDescriptor("date_dwnl", "ACCOUNT.DATE_DWNL", getBinderFactory().getBinderForType("Date")),
            new MemberDescriptor("datemaint", "ACCOUNT.DATEMAINT", getBinderFactory().getBinderForType("Date")),
            new MemberDescriptor("dateopened", "ACCOUNT.DATEOPENED", getBinderFactory().getBinderForType("Date")),
            new MemberDescriptor("descr1", "ACCOUNT.DESCR1", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("descr2", "ACCOUNT.DESCR2", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("ext_acctno", "ACCOUNT.EXT_ACCTNO", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("iban", "ACCOUNT.IBAN", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("intrnal", "ACCOUNT.INTRNAL", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("mnt_in_bo", "ACCOUNT.MNT_IN_BO", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("other_ccy", "ACCOUNT.OTHER_CCY", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("currency", "ACCOUNT.CURRENCY", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("shortname", "ACCOUNT.SHORTNAME", getBinderFactory().getBinderForType("String")),
		});

		setForeignKeyMappings(new ForeignKeyMappingDescriptor[] {
		});
	}

    private static final String tableName = "ACCOUNT";

    /**
     * Gets the table name - in this case ACCOUNT
     * <p>
     * Note that the <i>schema</i> must be prefixed to this when constructing
     * SQL statements, for example: <code>schema.ACCOUNT</code>
     * 
     * @return the table name
     */
	@Override
	public String getTableName() {       
		return tableName;
	}

	@Override
	public Class<?> getEntityClass() {
		return ACCOUNT.class;
	}

	public Class<?> getKeyClass() {
		return Key_ACCOUNT.class;
	}

	@Override
	public ACCOUNT constructEntity(final Object[] keyValues, final Object[] resultRow) {
		final ACCOUNT entity = new ACCOUNT();
		
		// Key members
		final Key_ACCOUNT key = entity.get$key();
		assignKeyValues(key, keyValues);

		assignMemberValues(entity, resultRow);
		
		return entity;
	}
	
	@Override
	public Key_ACCOUNT constructKey(final Object[] keyValues) {
		final Key_ACCOUNT key = new Key_ACCOUNT();
		assignKeyValues(key, keyValues);
		return key;
	}
	
	@Override
	public void assignKeyValues(final Object object, final Object[] resultRow) {
		final Key_ACCOUNT result = (Key_ACCOUNT)object;
		int index = 0;
		result.setAcct_key((java.lang.String)resultRow[index++]);
	}
	
	@Override
	public void assignMemberValues(final Object object, final Object[] resultRow) {
		final ACCOUNT result = (ACCOUNT)object;
		int index = 0;
		result.setTypeflag((java.lang.Integer)resultRow[index++]);
		result.setTstamp((java.lang.Integer)resultRow[index++]);
		result.setAcc_seqno((java.lang.Integer)resultRow[index++]);
		result.setAcc_type((java.lang.String)resultRow[index++]);
		result.setBo_acctno((java.lang.String)resultRow[index++]);
		result.setBrch_mnm((java.lang.String)resultRow[index++]);
		result.setCategory((java.lang.String)resultRow[index++]);
		result.setContingent((java.lang.String)resultRow[index++]);
		result.setCountry((java.lang.String)resultRow[index++]);
		result.setCus_sbb((java.lang.String)resultRow[index++]);
		result.setCus_mnm((java.lang.String)resultRow[index++]);
		result.setDateclosed((java.util.Date)resultRow[index++]);
		result.setDate_dwnl((java.util.Date)resultRow[index++]);
		result.setDatemaint((java.util.Date)resultRow[index++]);
		result.setDateopened((java.util.Date)resultRow[index++]);
		result.setDescr1((java.lang.String)resultRow[index++]);
		result.setDescr2((java.lang.String)resultRow[index++]);
		result.setExt_acctno((java.lang.String)resultRow[index++]);
		result.setIban((java.lang.String)resultRow[index++]);
		result.setIntrnal((java.lang.String)resultRow[index++]);
		result.setMnt_in_bo((java.lang.String)resultRow[index++]);
		result.setOther_ccy((java.lang.String)resultRow[index++]);
		result.setCurrency((java.lang.String)resultRow[index++]);
		result.setShortname((java.lang.String)resultRow[index++]);
	}

	@Override
	public Object[] getKeyMemberValues(final Object object) {
		final Key_ACCOUNT entity = (Key_ACCOUNT)object;
		final Object[] result = new Object[1];
		int index = 0;
		result[index++] = entity.getAcct_key();
		return result;
	}

	@Override
	public Object[] getMemberValues(final Object object) {
		final ACCOUNT entity = (ACCOUNT)object;
		final Object[] result = new Object[24];
		int index = 0;
		result[index++] = entity.getTypeflag();
		result[index++] = entity.getTstamp();
		result[index++] = entity.getAcc_seqno();
		result[index++] = entity.getAcc_type();
		result[index++] = entity.getBo_acctno();
		result[index++] = entity.getBrch_mnm();
		result[index++] = entity.getCategory();
		result[index++] = entity.getContingent();
		result[index++] = entity.getCountry();
		result[index++] = entity.getCus_sbb();
		result[index++] = entity.getCus_mnm();
		result[index++] = entity.getDateclosed();
		result[index++] = entity.getDate_dwnl();
		result[index++] = entity.getDatemaint();
		result[index++] = entity.getDateopened();
		result[index++] = entity.getDescr1();
		result[index++] = entity.getDescr2();
		result[index++] = entity.getExt_acctno();
		result[index++] = entity.getIban();
		result[index++] = entity.getIntrnal();
		result[index++] = entity.getMnt_in_bo();
		result[index++] = entity.getOther_ccy();
		result[index++] = entity.getCurrency();
		result[index++] = entity.getShortname();
		return result;
	}

	@Override
	public Object[] getMemberValuesForMember(final String memberName, final Object object) {
		throw new IllegalArgumentException("Not a complex member: " + memberName);
	}

	@Override
	public boolean requiresOptimisticLocking() {
		return false;
	}

	@Override
	public Object[] extractKeyValues(ResultSet resultSet) throws SQLException {
		return super.extractKeyValues(resultSet);
	}

	@Override
	public int bindKeyValues(Object[] keyValues, PreparedStatement stmt, final int startIndex) throws SQLException {
		return super.bindKeyValues(keyValues, stmt, startIndex);
	}

    @Override
	public Object getKeyFromEntity(final Object entity) {
		return (((ACCOUNT)entity).get$key());
	}

}
