package com.misys.tiplus2.customisation.entity.persister;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.misys.tiplus2.persistent.EntityPersister;
import com.misys.tiplus2.customisation.entity.DHPF;
import com.misys.tiplus2.customisation.entity.DHPF.Key_DHPF;

@SuppressWarnings("unchecked")
public class DHPFPersister extends EntityPersister {

	// This code will be generated by the builder 
	
	public DHPFPersister() {
		setKeyMembers(new MemberDescriptor[] {
            new MemberDescriptor("dhanmd", "DHPF.DHANMD", getBinderFactory().getBinderForType("String")),
		});
			
		setMembers(new MemberDescriptor[] {
            new MemberDescriptor("dhsna", "DHPF.DHSNA", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("dhatp", "DHPF.DHATP", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("dhbnoc", "DHPF.DHBNOC", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("dhcrt", "DHPF.DHCRT", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("category", "DHPF.CATEGORY", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("dhdrt", "DHPF.DHDRT", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("dhdia", "DHPF.DHDIA", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("mnt_in_bo", "DHPF.MNT_IN_BO", getBinderFactory().getBinderForType("String")),
		});

		setForeignKeyMappings(new ForeignKeyMappingDescriptor[] {
		});
	}

    private static final String tableName = "DHPF";

    /**
     * Gets the table name - in this case DHPF
     * <p>
     * Note that the <i>schema</i> must be prefixed to this when constructing
     * SQL statements, for example: <code>schema.DHPF</code>
     * 
     * @return the table name
     */
	@Override
	public String getTableName() {       
		return tableName;
	}

	@Override
	public Class<?> getEntityClass() {
		return DHPF.class;
	}

	public Class<?> getKeyClass() {
		return Key_DHPF.class;
	}

	@Override
	public DHPF constructEntity(final Object[] keyValues, final Object[] resultRow) {
		final DHPF entity = new DHPF();
		
		// Key members
		final Key_DHPF key = entity.get$key();
		assignKeyValues(key, keyValues);

		assignMemberValues(entity, resultRow);
		
		return entity;
	}
	
	@Override
	public Key_DHPF constructKey(final Object[] keyValues) {
		final Key_DHPF key = new Key_DHPF();
		assignKeyValues(key, keyValues);
		return key;
	}
	
	@Override
	public void assignKeyValues(final Object object, final Object[] resultRow) {
		final Key_DHPF result = (Key_DHPF)object;
		int index = 0;
		result.setDhanmd((java.lang.String)resultRow[index++]);
	}
	
	@Override
	public void assignMemberValues(final Object object, final Object[] resultRow) {
		final DHPF result = (DHPF)object;
		int index = 0;
		result.setDhsna((java.lang.String)resultRow[index++]);
		result.setDhatp((java.lang.String)resultRow[index++]);
		result.setDhbnoc((java.lang.String)resultRow[index++]);
		result.setDhcrt((java.lang.String)resultRow[index++]);
		result.setCategory((java.lang.String)resultRow[index++]);
		result.setDhdrt((java.lang.String)resultRow[index++]);
		result.setDhdia((java.lang.String)resultRow[index++]);
		result.setMnt_in_bo((java.lang.String)resultRow[index++]);
	}

	@Override
	public Object[] getKeyMemberValues(final Object object) {
		final Key_DHPF entity = (Key_DHPF)object;
		final Object[] result = new Object[1];
		int index = 0;
		result[index++] = entity.getDhanmd();
		return result;
	}

	@Override
	public Object[] getMemberValues(final Object object) {
		final DHPF entity = (DHPF)object;
		final Object[] result = new Object[8];
		int index = 0;
		result[index++] = entity.getDhsna();
		result[index++] = entity.getDhatp();
		result[index++] = entity.getDhbnoc();
		result[index++] = entity.getDhcrt();
		result[index++] = entity.getCategory();
		result[index++] = entity.getDhdrt();
		result[index++] = entity.getDhdia();
		result[index++] = entity.getMnt_in_bo();
		return result;
	}

	@Override
	public Object[] getMemberValuesForMember(final String memberName, final Object object) {
		throw new IllegalArgumentException("Not a complex member: " + memberName);
	}

	@Override
	public boolean requiresOptimisticLocking() {
		return false;
	}

	@Override
	public Object[] extractKeyValues(ResultSet resultSet) throws SQLException {
		return super.extractKeyValues(resultSet);
	}

	@Override
	public int bindKeyValues(Object[] keyValues, PreparedStatement stmt, final int startIndex) throws SQLException {
		return super.bindKeyValues(keyValues, stmt, startIndex);
	}

    @Override
	public Object getKeyFromEntity(final Object entity) {
		return (((DHPF)entity).get$key());
	}

}
