package com.misys.tiplus2.customisation.entity.persister;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.misys.tiplus2.persistent.EntityPersister;
import com.misys.tiplus2.customisation.entity.TAPF;
import com.misys.tiplus2.customisation.entity.TAPF.Key_TAPF;

@SuppressWarnings("unchecked")
public class TAPFPersister extends EntityPersister {

	// This code will be generated by the builder 
	
	public TAPFPersister() {
		setKeyMembers(new MemberDescriptor[] {
            new MemberDescriptor("tagrp", "TAPF.TAGRP", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("tasbb", "TAPF.TASBB", getBinderFactory().getBinderForType("String")),
		});
			
		setMembers(new MemberDescriptor[] {
            new MemberDescriptor("taofficer", "TAPF.TAOFFICER", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("tacna", "TAPF.TACNA", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("tagrd", "TAPF.TAGRD", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("mnt_in_bo", "TAPF.MNT_IN_BO", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("tapgrp", "TAPF.TAPGRP", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("tapsbb", "TAPF.TAPSBB", getBinderFactory().getBinderForType("String")),
		});

		setForeignKeyMappings(new ForeignKeyMappingDescriptor[] {
		});
	}

    private static final String tableName = "TAPF";

    /**
     * Gets the table name - in this case TAPF
     * <p>
     * Note that the <i>schema</i> must be prefixed to this when constructing
     * SQL statements, for example: <code>schema.TAPF</code>
     * 
     * @return the table name
     */
	@Override
	public String getTableName() {       
		return tableName;
	}

	@Override
	public Class<?> getEntityClass() {
		return TAPF.class;
	}

	public Class<?> getKeyClass() {
		return Key_TAPF.class;
	}

	@Override
	public TAPF constructEntity(final Object[] keyValues, final Object[] resultRow) {
		final TAPF entity = new TAPF();
		
		// Key members
		final Key_TAPF key = entity.get$key();
		assignKeyValues(key, keyValues);

		assignMemberValues(entity, resultRow);
		
		return entity;
	}
	
	@Override
	public Key_TAPF constructKey(final Object[] keyValues) {
		final Key_TAPF key = new Key_TAPF();
		assignKeyValues(key, keyValues);
		return key;
	}
	
	@Override
	public void assignKeyValues(final Object object, final Object[] resultRow) {
		final Key_TAPF result = (Key_TAPF)object;
		int index = 0;
		result.setTagrp((java.lang.String)resultRow[index++]);
		result.setTasbb((java.lang.String)resultRow[index++]);
	}
	
	@Override
	public void assignMemberValues(final Object object, final Object[] resultRow) {
		final TAPF result = (TAPF)object;
		int index = 0;
		result.setTaofficer((java.lang.String)resultRow[index++]);
		result.setTacna((java.lang.String)resultRow[index++]);
		result.setTagrd((java.lang.String)resultRow[index++]);
		result.setMnt_in_bo((java.lang.String)resultRow[index++]);
		result.setTapgrp((java.lang.String)resultRow[index++]);
		result.setTapsbb((java.lang.String)resultRow[index++]);
	}

	@Override
	public Object[] getKeyMemberValues(final Object object) {
		final Key_TAPF entity = (Key_TAPF)object;
		final Object[] result = new Object[2];
		int index = 0;
		result[index++] = entity.getTagrp();
		result[index++] = entity.getTasbb();
		return result;
	}

	@Override
	public Object[] getMemberValues(final Object object) {
		final TAPF entity = (TAPF)object;
		final Object[] result = new Object[6];
		int index = 0;
		result[index++] = entity.getTaofficer();
		result[index++] = entity.getTacna();
		result[index++] = entity.getTagrd();
		result[index++] = entity.getMnt_in_bo();
		result[index++] = entity.getTapgrp();
		result[index++] = entity.getTapsbb();
		return result;
	}

	@Override
	public Object[] getMemberValuesForMember(final String memberName, final Object object) {
		throw new IllegalArgumentException("Not a complex member: " + memberName);
	}

	@Override
	public boolean requiresOptimisticLocking() {
		return false;
	}

	@Override
	public Object[] extractKeyValues(ResultSet resultSet) throws SQLException {
		return super.extractKeyValues(resultSet);
	}

	@Override
	public int bindKeyValues(Object[] keyValues, PreparedStatement stmt, final int startIndex) throws SQLException {
		return super.bindKeyValues(keyValues, stmt, startIndex);
	}

    @Override
	public Object getKeyFromEntity(final Object entity) {
		return (((TAPF)entity).get$key());
	}

}
