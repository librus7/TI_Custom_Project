package com.misys.tiplus2.customisation.entity.persister;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.misys.tiplus2.persistent.EntityPersister;
import com.misys.tiplus2.customisation.entity.EXTICUST;
import com.misys.tiplus2.customisation.entity.EXTICUST.Key_EXTICUST;

@SuppressWarnings("unchecked")
public class EXTICUSTPersister extends EntityPersister {

	// This code will be generated by the builder 
	
	public EXTICUSTPersister() {
		setKeyMembers(new MemberDescriptor[] {
            new MemberDescriptor("key29", "EXTICUST.KEY29", getBinderFactory().getBinderForType("Long")),
		});
			
		setMembers(new MemberDescriptor[] {
            new MemberDescriptor("typeflag", "EXTICUST.TYPEFLAG", getBinderFactory().getBinderForType("Integer")),
            new MemberDescriptor("tstamp", "EXTICUST.TSTAMP", getBinderFactory().getBinderForType("Integer")),
            new MemberDescriptor("inited", "EXTICUST.INITED", getBinderFactory().getBinderForType("Integer")),
            new MemberDescriptor("ticust", "EXTICUST.TICUST", getBinderFactory().getBinderForType("Long")),
		});

		setForeignKeyMappings(new ForeignKeyMappingDescriptor[] {
		});
	}

    private static final String tableName = "EXTICUST";

    /**
     * Gets the table name - in this case EXTICUST
     * <p>
     * Note that the <i>schema</i> must be prefixed to this when constructing
     * SQL statements, for example: <code>schema.EXTICUST</code>
     * 
     * @return the table name
     */
	@Override
	public String getTableName() {       
		return tableName;
	}

	@Override
	public Class<?> getEntityClass() {
		return EXTICUST.class;
	}

	public Class<?> getKeyClass() {
		return Key_EXTICUST.class;
	}

	@Override
	public EXTICUST constructEntity(final Object[] keyValues, final Object[] resultRow) {
		final EXTICUST entity = new EXTICUST();
		
		// Key members
		final Key_EXTICUST key = entity.get$key();
		assignKeyValues(key, keyValues);

		assignMemberValues(entity, resultRow);
		
		return entity;
	}
	
	@Override
	public Key_EXTICUST constructKey(final Object[] keyValues) {
		final Key_EXTICUST key = new Key_EXTICUST();
		assignKeyValues(key, keyValues);
		return key;
	}
	
	@Override
	public void assignKeyValues(final Object object, final Object[] resultRow) {
		final Key_EXTICUST result = (Key_EXTICUST)object;
		int index = 0;
		result.setKey29((java.lang.Long)resultRow[index++]);
	}
	
	@Override
	public void assignMemberValues(final Object object, final Object[] resultRow) {
		final EXTICUST result = (EXTICUST)object;
		int index = 0;
		result.setTypeflag((java.lang.Integer)resultRow[index++]);
		result.setTstamp((java.lang.Integer)resultRow[index++]);
		result.setInited((java.lang.Integer)resultRow[index++]);
		result.setTicust((java.lang.Long)resultRow[index++]);
	}

	@Override
	public Object[] getKeyMemberValues(final Object object) {
		final Key_EXTICUST entity = (Key_EXTICUST)object;
		final Object[] result = new Object[1];
		int index = 0;
		result[index++] = entity.getKey29();
		return result;
	}

	@Override
	public Object[] getMemberValues(final Object object) {
		final EXTICUST entity = (EXTICUST)object;
		final Object[] result = new Object[4];
		int index = 0;
		result[index++] = entity.getTypeflag();
		result[index++] = entity.getTstamp();
		result[index++] = entity.getInited();
		result[index++] = entity.getTicust();
		return result;
	}

	@Override
	public Object[] getMemberValuesForMember(final String memberName, final Object object) {
		throw new IllegalArgumentException("Not a complex member: " + memberName);
	}

	@Override
	public boolean requiresOptimisticLocking() {
		return false;
	}

	@Override
	public Object[] extractKeyValues(ResultSet resultSet) throws SQLException {
		return super.extractKeyValues(resultSet);
	}

	@Override
	public int bindKeyValues(Object[] keyValues, PreparedStatement stmt, final int startIndex) throws SQLException {
		return super.bindKeyValues(keyValues, stmt, startIndex);
	}

    @Override
	public Object getKeyFromEntity(final Object entity) {
		return (((EXTICUST)entity).get$key());
	}

}
