package com.misys.tiplus2.customisation.entity.persister;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.misys.tiplus2.persistent.EntityPersister;
import com.misys.tiplus2.customisation.entity.C8PF;
import com.misys.tiplus2.customisation.entity.C8PF.Key_C8PF;

@SuppressWarnings("unchecked")
public class C8PFPersister extends EntityPersister {

	// This code will be generated by the builder 
	
	public C8PFPersister() {
		setKeyMembers(new MemberDescriptor[] {
            new MemberDescriptor("c8ccy", "C8PF.C8CCY", getBinderFactory().getBinderForType("String")),
		});
			
		setMembers(new MemberDescriptor[] {
            new MemberDescriptor("c8rfi", "C8PF.C8RFI", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("c8bsei", "C8PF.C8BSEI", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("c8bspt", "C8PF.C8BSPT", getBinderFactory().getBinderForType("BigDecimal")),
            new MemberDescriptor("c8psei", "C8PF.C8PSEI", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("c8pspt", "C8PF.C8PSPT", getBinderFactory().getBinderForType("BigDecimal")),
            new MemberDescriptor("c8grp", "C8PF.C8GRP", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("c8mbr", "C8PF.C8MBR", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("mnt_in_bo", "C8PF.MNT_IN_BO", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("c8mcd", "C8PF.C8MCD", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("c8nu1o", "C8PF.C8NU1O", getBinderFactory().getBinderForType("Integer")),
            new MemberDescriptor("c8nu1s", "C8PF.C8NU1S", getBinderFactory().getBinderForType("Integer")),
            new MemberDescriptor("c8dfc", "C8PF.C8DFC", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("c8idbc", "C8PF.C8IDBC", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("c8idbd", "C8PF.C8IDBD", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("c8ced", "C8PF.C8CED", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("c8cur", "C8PF.C8CUR", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("c8itc", "C8PF.C8ITC", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("c8ccyn", "C8PF.C8CCYN", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("c8sei", "C8PF.C8SEI", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("c8spt", "C8PF.C8SPT", getBinderFactory().getBinderForType("BigDecimal")),
            new MemberDescriptor("c8sri", "C8PF.C8SRI", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("c8scy", "C8PF.C8SCY", getBinderFactory().getBinderForType("String")),
		});

		setForeignKeyMappings(new ForeignKeyMappingDescriptor[] {
		});
	}

    private static final String tableName = "C8PF";

    /**
     * Gets the table name - in this case C8PF
     * <p>
     * Note that the <i>schema</i> must be prefixed to this when constructing
     * SQL statements, for example: <code>schema.C8PF</code>
     * 
     * @return the table name
     */
	@Override
	public String getTableName() {       
		return tableName;
	}

	@Override
	public Class<?> getEntityClass() {
		return C8PF.class;
	}

	public Class<?> getKeyClass() {
		return Key_C8PF.class;
	}

	@Override
	public C8PF constructEntity(final Object[] keyValues, final Object[] resultRow) {
		final C8PF entity = new C8PF();
		
		// Key members
		final Key_C8PF key = entity.get$key();
		assignKeyValues(key, keyValues);

		assignMemberValues(entity, resultRow);
		
		return entity;
	}
	
	@Override
	public Key_C8PF constructKey(final Object[] keyValues) {
		final Key_C8PF key = new Key_C8PF();
		assignKeyValues(key, keyValues);
		return key;
	}
	
	@Override
	public void assignKeyValues(final Object object, final Object[] resultRow) {
		final Key_C8PF result = (Key_C8PF)object;
		int index = 0;
		result.setC8ccy((java.lang.String)resultRow[index++]);
	}
	
	@Override
	public void assignMemberValues(final Object object, final Object[] resultRow) {
		final C8PF result = (C8PF)object;
		int index = 0;
		result.setC8rfi((java.lang.String)resultRow[index++]);
		result.setC8bsei((java.lang.String)resultRow[index++]);
		result.setC8bspt((java.math.BigDecimal)resultRow[index++]);
		result.setC8psei((java.lang.String)resultRow[index++]);
		result.setC8pspt((java.math.BigDecimal)resultRow[index++]);
		result.setC8grp((java.lang.String)resultRow[index++]);
		result.setC8mbr((java.lang.String)resultRow[index++]);
		result.setMnt_in_bo((java.lang.String)resultRow[index++]);
		result.setC8mcd((java.lang.String)resultRow[index++]);
		result.setC8nu1o((java.lang.Integer)resultRow[index++]);
		result.setC8nu1s((java.lang.Integer)resultRow[index++]);
		result.setC8dfc((java.lang.String)resultRow[index++]);
		result.setC8idbc((java.lang.String)resultRow[index++]);
		result.setC8idbd((java.lang.String)resultRow[index++]);
		result.setC8ced((java.lang.String)resultRow[index++]);
		result.setC8cur((java.lang.String)resultRow[index++]);
		result.setC8itc((java.lang.String)resultRow[index++]);
		result.setC8ccyn((java.lang.String)resultRow[index++]);
		result.setC8sei((java.lang.String)resultRow[index++]);
		result.setC8spt((java.math.BigDecimal)resultRow[index++]);
		result.setC8sri((java.lang.String)resultRow[index++]);
		result.setC8scy((java.lang.String)resultRow[index++]);
	}

	@Override
	public Object[] getKeyMemberValues(final Object object) {
		final Key_C8PF entity = (Key_C8PF)object;
		final Object[] result = new Object[1];
		int index = 0;
		result[index++] = entity.getC8ccy();
		return result;
	}

	@Override
	public Object[] getMemberValues(final Object object) {
		final C8PF entity = (C8PF)object;
		final Object[] result = new Object[22];
		int index = 0;
		result[index++] = entity.getC8rfi();
		result[index++] = entity.getC8bsei();
		result[index++] = entity.getC8bspt();
		result[index++] = entity.getC8psei();
		result[index++] = entity.getC8pspt();
		result[index++] = entity.getC8grp();
		result[index++] = entity.getC8mbr();
		result[index++] = entity.getMnt_in_bo();
		result[index++] = entity.getC8mcd();
		result[index++] = entity.getC8nu1o();
		result[index++] = entity.getC8nu1s();
		result[index++] = entity.getC8dfc();
		result[index++] = entity.getC8idbc();
		result[index++] = entity.getC8idbd();
		result[index++] = entity.getC8ced();
		result[index++] = entity.getC8cur();
		result[index++] = entity.getC8itc();
		result[index++] = entity.getC8ccyn();
		result[index++] = entity.getC8sei();
		result[index++] = entity.getC8spt();
		result[index++] = entity.getC8sri();
		result[index++] = entity.getC8scy();
		return result;
	}

	@Override
	public Object[] getMemberValuesForMember(final String memberName, final Object object) {
		throw new IllegalArgumentException("Not a complex member: " + memberName);
	}

	@Override
	public boolean requiresOptimisticLocking() {
		return false;
	}

	@Override
	public Object[] extractKeyValues(ResultSet resultSet) throws SQLException {
		return super.extractKeyValues(resultSet);
	}

	@Override
	public int bindKeyValues(Object[] keyValues, PreparedStatement stmt, final int startIndex) throws SQLException {
		return super.bindKeyValues(keyValues, stmt, startIndex);
	}

    @Override
	public Object getKeyFromEntity(final Object entity) {
		return (((C8PF)entity).get$key());
	}

}
