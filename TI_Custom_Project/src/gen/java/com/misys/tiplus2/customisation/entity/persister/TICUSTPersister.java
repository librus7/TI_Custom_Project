package com.misys.tiplus2.customisation.entity.persister;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.misys.tiplus2.persistent.EntityPersister;
import com.misys.tiplus2.customisation.entity.TICUST;
import com.misys.tiplus2.customisation.entity.TICUST.Key_TICUST;

@SuppressWarnings("unchecked")
public class TICUSTPersister extends EntityPersister {

	// This code will be generated by the builder 
	
	public TICUSTPersister() {
		setKeyMembers(new MemberDescriptor[] {
            new MemberDescriptor("key97", "TICUST.KEY97", getBinderFactory().getBinderForType("Long")),
		});
			
		setMembers(new MemberDescriptor[] {
            new MemberDescriptor("typeflag", "TICUST.TYPEFLAG", getBinderFactory().getBinderForType("Integer")),
            new MemberDescriptor("tstamp", "TICUST.TSTAMP", getBinderFactory().getBinderForType("Integer")),
            new MemberDescriptor("int_consol", "TICUST.INT_CONSOL", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("timt103_c", "TICUST.TIMT103_C", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("taxexem", "TICUST.TAXEXEM", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("fxrchrg", "TICUST.FXRCHRG", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("chrg_grp", "TICUST.CHRG_GRP", getBinderFactory().getBinderForType("Long")),
            new MemberDescriptor("corpaccess", "TICUST.CORPACCESS", getBinderFactory().getBinderForType("Long")),
            new MemberDescriptor("custsbb", "TICUST.CUSTSBB", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("custmnm", "TICUST.CUSTMNM", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("cutoff_amt", "TICUST.CUTOFF_AMT", getBinderFactory().getBinderForType("Long")),
            new MemberDescriptor("cutoff_ccy", "TICUST.CUTOFF_CCY", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("cutoff_rcd", "TICUST.CUTOFF_RCD", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("extfield", "TICUST.EXTFIELD", getBinderFactory().getBinderForType("Long")),
            new MemberDescriptor("mnt_in_bo", "TICUST.MNT_IN_BO", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("fxrprin", "TICUST.FXRPRIN", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("swackreqd", "TICUST.SWACKREQD", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("instrs", "TICUST.INSTRS", getBinderFactory().getBinderForType("Clob")),
            new MemberDescriptor("suspend_bo", "TICUST.SUSPEND_BO", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("suspend_ti", "TICUST.SUSPEND_TI", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("translit", "TICUST.TRANSLIT", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("workg", "TICUST.WORKG", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("gateway", "TICUST.GATEWAY", getBinderFactory().getBinderForType("String")),
		});

		setForeignKeyMappings(new ForeignKeyMappingDescriptor[] {
		});
	}

    private static final String tableName = "TICUST";

    /**
     * Gets the table name - in this case TICUST
     * <p>
     * Note that the <i>schema</i> must be prefixed to this when constructing
     * SQL statements, for example: <code>schema.TICUST</code>
     * 
     * @return the table name
     */
	@Override
	public String getTableName() {       
		return tableName;
	}

	@Override
	public Class<?> getEntityClass() {
		return TICUST.class;
	}

	public Class<?> getKeyClass() {
		return Key_TICUST.class;
	}

	@Override
	public TICUST constructEntity(final Object[] keyValues, final Object[] resultRow) {
		final TICUST entity = new TICUST();
		
		// Key members
		final Key_TICUST key = entity.get$key();
		assignKeyValues(key, keyValues);

		assignMemberValues(entity, resultRow);
		
		return entity;
	}
	
	@Override
	public Key_TICUST constructKey(final Object[] keyValues) {
		final Key_TICUST key = new Key_TICUST();
		assignKeyValues(key, keyValues);
		return key;
	}
	
	@Override
	public void assignKeyValues(final Object object, final Object[] resultRow) {
		final Key_TICUST result = (Key_TICUST)object;
		int index = 0;
		result.setKey97((java.lang.Long)resultRow[index++]);
	}
	
	@Override
	public void assignMemberValues(final Object object, final Object[] resultRow) {
		final TICUST result = (TICUST)object;
		int index = 0;
		result.setTypeflag((java.lang.Integer)resultRow[index++]);
		result.setTstamp((java.lang.Integer)resultRow[index++]);
		result.setInt_consol((java.lang.String)resultRow[index++]);
		result.setTimt103_c((java.lang.String)resultRow[index++]);
		result.setTaxexem((java.lang.String)resultRow[index++]);
		result.setFxrchrg((java.lang.String)resultRow[index++]);
		result.setChrg_grp((java.lang.Long)resultRow[index++]);
		result.setCorpaccess((java.lang.Long)resultRow[index++]);
		result.setCustsbb((java.lang.String)resultRow[index++]);
		result.setCustmnm((java.lang.String)resultRow[index++]);
		result.setCutoff_amt((java.lang.Long)resultRow[index++]);
		result.setCutoff_ccy((java.lang.String)resultRow[index++]);
		result.setCutoff_rcd((java.lang.String)resultRow[index++]);
		result.setExtfield((java.lang.Long)resultRow[index++]);
		result.setMnt_in_bo((java.lang.String)resultRow[index++]);
		result.setFxrprin((java.lang.String)resultRow[index++]);
		result.setSwackreqd((java.lang.String)resultRow[index++]);
		result.setInstrs((java.lang.String)resultRow[index++]);
		result.setSuspend_bo((java.lang.String)resultRow[index++]);
		result.setSuspend_ti((java.lang.String)resultRow[index++]);
		result.setTranslit((java.lang.String)resultRow[index++]);
		result.setWorkg((java.lang.String)resultRow[index++]);
		result.setGateway((java.lang.String)resultRow[index++]);
	}

	@Override
	public Object[] getKeyMemberValues(final Object object) {
		final Key_TICUST entity = (Key_TICUST)object;
		final Object[] result = new Object[1];
		int index = 0;
		result[index++] = entity.getKey97();
		return result;
	}

	@Override
	public Object[] getMemberValues(final Object object) {
		final TICUST entity = (TICUST)object;
		final Object[] result = new Object[23];
		int index = 0;
		result[index++] = entity.getTypeflag();
		result[index++] = entity.getTstamp();
		result[index++] = entity.getInt_consol();
		result[index++] = entity.getTimt103_c();
		result[index++] = entity.getTaxexem();
		result[index++] = entity.getFxrchrg();
		result[index++] = entity.getChrg_grp();
		result[index++] = entity.getCorpaccess();
		result[index++] = entity.getCustsbb();
		result[index++] = entity.getCustmnm();
		result[index++] = entity.getCutoff_amt();
		result[index++] = entity.getCutoff_ccy();
		result[index++] = entity.getCutoff_rcd();
		result[index++] = entity.getExtfield();
		result[index++] = entity.getMnt_in_bo();
		result[index++] = entity.getFxrprin();
		result[index++] = entity.getSwackreqd();
		result[index++] = entity.getInstrs();
		result[index++] = entity.getSuspend_bo();
		result[index++] = entity.getSuspend_ti();
		result[index++] = entity.getTranslit();
		result[index++] = entity.getWorkg();
		result[index++] = entity.getGateway();
		return result;
	}

	@Override
	public Object[] getMemberValuesForMember(final String memberName, final Object object) {
		throw new IllegalArgumentException("Not a complex member: " + memberName);
	}

	@Override
	public boolean requiresOptimisticLocking() {
		return false;
	}

	@Override
	public Object[] extractKeyValues(ResultSet resultSet) throws SQLException {
		return super.extractKeyValues(resultSet);
	}

	@Override
	public int bindKeyValues(Object[] keyValues, PreparedStatement stmt, final int startIndex) throws SQLException {
		return super.bindKeyValues(keyValues, stmt, startIndex);
	}

    @Override
	public Object getKeyFromEntity(final Object entity) {
		return (((TICUST)entity).get$key());
	}

}
