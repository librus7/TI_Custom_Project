package com.misys.tiplus2.customisation.entity.persister;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.misys.tiplus2.persistent.EntityPersister;
import com.misys.tiplus2.customisation.entity.RFPF;
import com.misys.tiplus2.customisation.entity.RFPF.Key_RFPF;

@SuppressWarnings("unchecked")
public class RFPFPersister extends EntityPersister {

	// This code will be generated by the builder 
	
	public RFPFPersister() {
		setKeyMembers(new MemberDescriptor[] {
            new MemberDescriptor("rfmcy", "RFPF.RFMCY", getBinderFactory().getBinderForType("String")),
		});
			
		setMembers(new MemberDescriptor[] {
            new MemberDescriptor("rfrdt", "RFPF.RFRDT", getBinderFactory().getBinderForType("BigDecimal")),
            new MemberDescriptor("rffrt", "RFPF.RFFRT", getBinderFactory().getBinderForType("BigDecimal")),
            new MemberDescriptor("rfrcr", "RFPF.RFRCR", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("rfgcy", "RFPF.RFGCY", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("rfidt", "RFPF.RFIDT", getBinderFactory().getBinderForType("BigDecimal")),
            new MemberDescriptor("rfdlm", "RFPF.RFDLM", getBinderFactory().getBinderForType("BigDecimal")),
            new MemberDescriptor("mnt_in_bo", "RFPF.MNT_IN_BO", getBinderFactory().getBinderForType("String")),
		});

		setForeignKeyMappings(new ForeignKeyMappingDescriptor[] {
		});
	}

    private static final String tableName = "RFPF";

    /**
     * Gets the table name - in this case RFPF
     * <p>
     * Note that the <i>schema</i> must be prefixed to this when constructing
     * SQL statements, for example: <code>schema.RFPF</code>
     * 
     * @return the table name
     */
	@Override
	public String getTableName() {       
		return tableName;
	}

	@Override
	public Class<?> getEntityClass() {
		return RFPF.class;
	}

	public Class<?> getKeyClass() {
		return Key_RFPF.class;
	}

	@Override
	public RFPF constructEntity(final Object[] keyValues, final Object[] resultRow) {
		final RFPF entity = new RFPF();
		
		// Key members
		final Key_RFPF key = entity.get$key();
		assignKeyValues(key, keyValues);

		assignMemberValues(entity, resultRow);
		
		return entity;
	}
	
	@Override
	public Key_RFPF constructKey(final Object[] keyValues) {
		final Key_RFPF key = new Key_RFPF();
		assignKeyValues(key, keyValues);
		return key;
	}
	
	@Override
	public void assignKeyValues(final Object object, final Object[] resultRow) {
		final Key_RFPF result = (Key_RFPF)object;
		int index = 0;
		result.setRfmcy((java.lang.String)resultRow[index++]);
	}
	
	@Override
	public void assignMemberValues(final Object object, final Object[] resultRow) {
		final RFPF result = (RFPF)object;
		int index = 0;
		result.setRfrdt((java.math.BigDecimal)resultRow[index++]);
		result.setRffrt((java.math.BigDecimal)resultRow[index++]);
		result.setRfrcr((java.lang.String)resultRow[index++]);
		result.setRfgcy((java.lang.String)resultRow[index++]);
		result.setRfidt((java.math.BigDecimal)resultRow[index++]);
		result.setRfdlm((java.math.BigDecimal)resultRow[index++]);
		result.setMnt_in_bo((java.lang.String)resultRow[index++]);
	}

	@Override
	public Object[] getKeyMemberValues(final Object object) {
		final Key_RFPF entity = (Key_RFPF)object;
		final Object[] result = new Object[1];
		int index = 0;
		result[index++] = entity.getRfmcy();
		return result;
	}

	@Override
	public Object[] getMemberValues(final Object object) {
		final RFPF entity = (RFPF)object;
		final Object[] result = new Object[7];
		int index = 0;
		result[index++] = entity.getRfrdt();
		result[index++] = entity.getRffrt();
		result[index++] = entity.getRfrcr();
		result[index++] = entity.getRfgcy();
		result[index++] = entity.getRfidt();
		result[index++] = entity.getRfdlm();
		result[index++] = entity.getMnt_in_bo();
		return result;
	}

	@Override
	public Object[] getMemberValuesForMember(final String memberName, final Object object) {
		throw new IllegalArgumentException("Not a complex member: " + memberName);
	}

	@Override
	public boolean requiresOptimisticLocking() {
		return false;
	}

	@Override
	public Object[] extractKeyValues(ResultSet resultSet) throws SQLException {
		return super.extractKeyValues(resultSet);
	}

	@Override
	public int bindKeyValues(Object[] keyValues, PreparedStatement stmt, final int startIndex) throws SQLException {
		return super.bindKeyValues(keyValues, stmt, startIndex);
	}

    @Override
	public Object getKeyFromEntity(final Object entity) {
		return (((RFPF)entity).get$key());
	}

}
