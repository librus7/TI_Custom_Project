package com.misys.tiplus2.customisation.entity.persister;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.misys.tiplus2.persistent.EntityPersister;
import com.misys.tiplus2.customisation.entity.GJPF;
import com.misys.tiplus2.customisation.entity.GJPF.Key_GJPF;

@SuppressWarnings("unchecked")
public class GJPFPersister extends EntityPersister {

	// This code will be generated by the builder 
	
	public GJPFPersister() {
		setKeyMembers(new MemberDescriptor[] {
            new MemberDescriptor("gjnst", "GJPF.GJNST", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("gjmbe", "GJPF.GJMBE", getBinderFactory().getBinderForType("String")),
		});
			
		setMembers(new MemberDescriptor[] {
            new MemberDescriptor("gjacct", "GJPF.GJACCT", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("gjccy", "GJPF.GJCCY", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("gjnds", "GJPF.GJNDS", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("gjabf", "GJPF.GJABF", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("gjanf", "GJPF.GJANF", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("gjasf", "GJPF.GJASF", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("mnt_in_bo", "GJPF.MNT_IN_BO", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("gjoan", "GJPF.GJOAN", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("gjxmr", "GJPF.GJXMR", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("gjxm", "GJPF.GJXM", getBinderFactory().getBinderForType("String")),
		});

		setForeignKeyMappings(new ForeignKeyMappingDescriptor[] {
		});
	}

    private static final String tableName = "GJPF";

    /**
     * Gets the table name - in this case GJPF
     * <p>
     * Note that the <i>schema</i> must be prefixed to this when constructing
     * SQL statements, for example: <code>schema.GJPF</code>
     * 
     * @return the table name
     */
	@Override
	public String getTableName() {       
		return tableName;
	}

	@Override
	public Class<?> getEntityClass() {
		return GJPF.class;
	}

	public Class<?> getKeyClass() {
		return Key_GJPF.class;
	}

	@Override
	public GJPF constructEntity(final Object[] keyValues, final Object[] resultRow) {
		final GJPF entity = new GJPF();
		
		// Key members
		final Key_GJPF key = entity.get$key();
		assignKeyValues(key, keyValues);

		assignMemberValues(entity, resultRow);
		
		return entity;
	}
	
	@Override
	public Key_GJPF constructKey(final Object[] keyValues) {
		final Key_GJPF key = new Key_GJPF();
		assignKeyValues(key, keyValues);
		return key;
	}
	
	@Override
	public void assignKeyValues(final Object object, final Object[] resultRow) {
		final Key_GJPF result = (Key_GJPF)object;
		int index = 0;
		result.setGjnst((java.lang.String)resultRow[index++]);
		result.setGjmbe((java.lang.String)resultRow[index++]);
	}
	
	@Override
	public void assignMemberValues(final Object object, final Object[] resultRow) {
		final GJPF result = (GJPF)object;
		int index = 0;
		result.setGjacct((java.lang.String)resultRow[index++]);
		result.setGjccy((java.lang.String)resultRow[index++]);
		result.setGjnds((java.lang.String)resultRow[index++]);
		result.setGjabf((java.lang.String)resultRow[index++]);
		result.setGjanf((java.lang.String)resultRow[index++]);
		result.setGjasf((java.lang.String)resultRow[index++]);
		result.setMnt_in_bo((java.lang.String)resultRow[index++]);
		result.setGjoan((java.lang.String)resultRow[index++]);
		result.setGjxmr((java.lang.String)resultRow[index++]);
		result.setGjxm((java.lang.String)resultRow[index++]);
	}

	@Override
	public Object[] getKeyMemberValues(final Object object) {
		final Key_GJPF entity = (Key_GJPF)object;
		final Object[] result = new Object[2];
		int index = 0;
		result[index++] = entity.getGjnst();
		result[index++] = entity.getGjmbe();
		return result;
	}

	@Override
	public Object[] getMemberValues(final Object object) {
		final GJPF entity = (GJPF)object;
		final Object[] result = new Object[10];
		int index = 0;
		result[index++] = entity.getGjacct();
		result[index++] = entity.getGjccy();
		result[index++] = entity.getGjnds();
		result[index++] = entity.getGjabf();
		result[index++] = entity.getGjanf();
		result[index++] = entity.getGjasf();
		result[index++] = entity.getMnt_in_bo();
		result[index++] = entity.getGjoan();
		result[index++] = entity.getGjxmr();
		result[index++] = entity.getGjxm();
		return result;
	}

	@Override
	public Object[] getMemberValuesForMember(final String memberName, final Object object) {
		throw new IllegalArgumentException("Not a complex member: " + memberName);
	}

	@Override
	public boolean requiresOptimisticLocking() {
		return false;
	}

	@Override
	public Object[] extractKeyValues(ResultSet resultSet) throws SQLException {
		return super.extractKeyValues(resultSet);
	}

	@Override
	public int bindKeyValues(Object[] keyValues, PreparedStatement stmt, final int startIndex) throws SQLException {
		return super.bindKeyValues(keyValues, stmt, startIndex);
	}

    @Override
	public Object getKeyFromEntity(final Object entity) {
		return (((GJPF)entity).get$key());
	}

}
