package com.misys.tiplus2.customisation.entity.persister;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.misys.tiplus2.persistent.EntityPersister;
import com.misys.tiplus2.customisation.entity.C7PF;
import com.misys.tiplus2.customisation.entity.C7PF.Key_C7PF;

@SuppressWarnings("unchecked")
public class C7PFPersister extends EntityPersister {

	// This code will be generated by the builder 
	
	public C7PFPersister() {
		setKeyMembers(new MemberDescriptor[] {
            new MemberDescriptor("c7cna", "C7PF.C7CNA", getBinderFactory().getBinderForType("String")),
		});
			
		setMembers(new MemberDescriptor[] {
            new MemberDescriptor("c7rfi", "C7PF.C7RFI", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("isocna", "C7PF.ISOCNA", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("mnt_in_bo", "C7PF.MNT_IN_BO", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("c7tenor", "C7PF.C7TENOR", getBinderFactory().getBinderForType("Integer")),
            new MemberDescriptor("c7cnm", "C7PF.C7CNM", getBinderFactory().getBinderForType("String")),
		});

		setForeignKeyMappings(new ForeignKeyMappingDescriptor[] {
		});
	}

    private static final String tableName = "C7PF";

    /**
     * Gets the table name - in this case C7PF
     * <p>
     * Note that the <i>schema</i> must be prefixed to this when constructing
     * SQL statements, for example: <code>schema.C7PF</code>
     * 
     * @return the table name
     */
	@Override
	public String getTableName() {       
		return tableName;
	}

	@Override
	public Class<?> getEntityClass() {
		return C7PF.class;
	}

	public Class<?> getKeyClass() {
		return Key_C7PF.class;
	}

	@Override
	public C7PF constructEntity(final Object[] keyValues, final Object[] resultRow) {
		final C7PF entity = new C7PF();
		
		// Key members
		final Key_C7PF key = entity.get$key();
		assignKeyValues(key, keyValues);

		assignMemberValues(entity, resultRow);
		
		return entity;
	}
	
	@Override
	public Key_C7PF constructKey(final Object[] keyValues) {
		final Key_C7PF key = new Key_C7PF();
		assignKeyValues(key, keyValues);
		return key;
	}
	
	@Override
	public void assignKeyValues(final Object object, final Object[] resultRow) {
		final Key_C7PF result = (Key_C7PF)object;
		int index = 0;
		result.setC7cna((java.lang.String)resultRow[index++]);
	}
	
	@Override
	public void assignMemberValues(final Object object, final Object[] resultRow) {
		final C7PF result = (C7PF)object;
		int index = 0;
		result.setC7rfi((java.lang.String)resultRow[index++]);
		result.setIsocna((java.lang.String)resultRow[index++]);
		result.setMnt_in_bo((java.lang.String)resultRow[index++]);
		result.setC7tenor((java.lang.Integer)resultRow[index++]);
		result.setC7cnm((java.lang.String)resultRow[index++]);
	}

	@Override
	public Object[] getKeyMemberValues(final Object object) {
		final Key_C7PF entity = (Key_C7PF)object;
		final Object[] result = new Object[1];
		int index = 0;
		result[index++] = entity.getC7cna();
		return result;
	}

	@Override
	public Object[] getMemberValues(final Object object) {
		final C7PF entity = (C7PF)object;
		final Object[] result = new Object[5];
		int index = 0;
		result[index++] = entity.getC7rfi();
		result[index++] = entity.getIsocna();
		result[index++] = entity.getMnt_in_bo();
		result[index++] = entity.getC7tenor();
		result[index++] = entity.getC7cnm();
		return result;
	}

	@Override
	public Object[] getMemberValuesForMember(final String memberName, final Object object) {
		throw new IllegalArgumentException("Not a complex member: " + memberName);
	}

	@Override
	public boolean requiresOptimisticLocking() {
		return false;
	}

	@Override
	public Object[] extractKeyValues(ResultSet resultSet) throws SQLException {
		return super.extractKeyValues(resultSet);
	}

	@Override
	public int bindKeyValues(Object[] keyValues, PreparedStatement stmt, final int startIndex) throws SQLException {
		return super.bindKeyValues(keyValues, stmt, startIndex);
	}

    @Override
	public Object getKeyFromEntity(final Object entity) {
		return (((C7PF)entity).get$key());
	}

}
