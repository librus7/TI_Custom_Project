package com.misys.tiplus2.customisation.entity.persister;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.misys.tiplus2.persistent.EntityPersister;
import com.misys.tiplus2.customisation.entity.CKPF;
import com.misys.tiplus2.customisation.entity.CKPF.Key_CKPF;

@SuppressWarnings("unchecked")
public class CKPFPersister extends EntityPersister {

	// This code will be generated by the builder 
	
	public CKPFPersister() {
		setKeyMembers(new MemberDescriptor[] {
            new MemberDescriptor("ckccd", "CKPF.CKCCD", getBinderFactory().getBinderForType("String")),
		});
			
		setMembers(new MemberDescriptor[] {
            new MemberDescriptor("ckpat", "CKPF.CKPAT", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("category", "CKPF.CATEGORY", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("ckcrt", "CKPF.CKCRT", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("cksde", "CKPF.CKSDE", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("ckdrt", "CKPF.CKDRT", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("mnt_in_bo", "CKPF.MNT_IN_BO", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("cksna", "CKPF.CKSNA", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("ckan", "CKPF.CKAN", getBinderFactory().getBinderForType("String")),
		});

		setForeignKeyMappings(new ForeignKeyMappingDescriptor[] {
		});
	}

    private static final String tableName = "CKPF";

    /**
     * Gets the table name - in this case CKPF
     * <p>
     * Note that the <i>schema</i> must be prefixed to this when constructing
     * SQL statements, for example: <code>schema.CKPF</code>
     * 
     * @return the table name
     */
	@Override
	public String getTableName() {       
		return tableName;
	}

	@Override
	public Class<?> getEntityClass() {
		return CKPF.class;
	}

	public Class<?> getKeyClass() {
		return Key_CKPF.class;
	}

	@Override
	public CKPF constructEntity(final Object[] keyValues, final Object[] resultRow) {
		final CKPF entity = new CKPF();
		
		// Key members
		final Key_CKPF key = entity.get$key();
		assignKeyValues(key, keyValues);

		assignMemberValues(entity, resultRow);
		
		return entity;
	}
	
	@Override
	public Key_CKPF constructKey(final Object[] keyValues) {
		final Key_CKPF key = new Key_CKPF();
		assignKeyValues(key, keyValues);
		return key;
	}
	
	@Override
	public void assignKeyValues(final Object object, final Object[] resultRow) {
		final Key_CKPF result = (Key_CKPF)object;
		int index = 0;
		result.setCkccd((java.lang.String)resultRow[index++]);
	}
	
	@Override
	public void assignMemberValues(final Object object, final Object[] resultRow) {
		final CKPF result = (CKPF)object;
		int index = 0;
		result.setCkpat((java.lang.String)resultRow[index++]);
		result.setCategory((java.lang.String)resultRow[index++]);
		result.setCkcrt((java.lang.String)resultRow[index++]);
		result.setCksde((java.lang.String)resultRow[index++]);
		result.setCkdrt((java.lang.String)resultRow[index++]);
		result.setMnt_in_bo((java.lang.String)resultRow[index++]);
		result.setCksna((java.lang.String)resultRow[index++]);
		result.setCkan((java.lang.String)resultRow[index++]);
	}

	@Override
	public Object[] getKeyMemberValues(final Object object) {
		final Key_CKPF entity = (Key_CKPF)object;
		final Object[] result = new Object[1];
		int index = 0;
		result[index++] = entity.getCkccd();
		return result;
	}

	@Override
	public Object[] getMemberValues(final Object object) {
		final CKPF entity = (CKPF)object;
		final Object[] result = new Object[8];
		int index = 0;
		result[index++] = entity.getCkpat();
		result[index++] = entity.getCategory();
		result[index++] = entity.getCkcrt();
		result[index++] = entity.getCksde();
		result[index++] = entity.getCkdrt();
		result[index++] = entity.getMnt_in_bo();
		result[index++] = entity.getCksna();
		result[index++] = entity.getCkan();
		return result;
	}

	@Override
	public Object[] getMemberValuesForMember(final String memberName, final Object object) {
		throw new IllegalArgumentException("Not a complex member: " + memberName);
	}

	@Override
	public boolean requiresOptimisticLocking() {
		return false;
	}

	@Override
	public Object[] extractKeyValues(ResultSet resultSet) throws SQLException {
		return super.extractKeyValues(resultSet);
	}

	@Override
	public int bindKeyValues(Object[] keyValues, PreparedStatement stmt, final int startIndex) throws SQLException {
		return super.bindKeyValues(keyValues, stmt, startIndex);
	}

    @Override
	public Object getKeyFromEntity(final Object entity) {
		return (((CKPF)entity).get$key());
	}

}
