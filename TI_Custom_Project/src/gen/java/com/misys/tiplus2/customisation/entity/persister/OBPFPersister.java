package com.misys.tiplus2.customisation.entity.persister;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.misys.tiplus2.persistent.EntityPersister;
import com.misys.tiplus2.customisation.entity.OBPF;
import com.misys.tiplus2.customisation.entity.OBPF.Key_OBPF;

@SuppressWarnings("unchecked")
public class OBPFPersister extends EntityPersister {

	// This code will be generated by the builder 
	
	public OBPFPersister() {
		setKeyMembers(new MemberDescriptor[] {
            new MemberDescriptor("obdlp", "OBPF.OBDLP", getBinderFactory().getBinderForType("String")),
		});
			
		setMembers(new MemberDescriptor[] {
            new MemberDescriptor("obapp", "OBPF.OBAPP", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("obbdt", "OBPF.OBBDT", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("obactb", "OBPF.OBACTB", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("obdpd", "OBPF.OBDPD", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("obdtyf", "OBPF.OBDTYF", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("obiig6", "OBPF.OBIIG6", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("obing", "OBPF.OBING", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("obdic", "OBPF.OBDIC", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("mnt_in_bo", "OBPF.MNT_IN_BO", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("obychq", "OBPF.OBYCHQ", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("obyddb", "OBPF.OBYDDB", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("obysda", "OBPF.OBYSDA", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("obtdt", "OBPF.OBTDT", getBinderFactory().getBinderForType("String")),
		});

		setForeignKeyMappings(new ForeignKeyMappingDescriptor[] {
		});
	}

    private static final String tableName = "OBPF";

    /**
     * Gets the table name - in this case OBPF
     * <p>
     * Note that the <i>schema</i> must be prefixed to this when constructing
     * SQL statements, for example: <code>schema.OBPF</code>
     * 
     * @return the table name
     */
	@Override
	public String getTableName() {       
		return tableName;
	}

	@Override
	public Class<?> getEntityClass() {
		return OBPF.class;
	}

	public Class<?> getKeyClass() {
		return Key_OBPF.class;
	}

	@Override
	public OBPF constructEntity(final Object[] keyValues, final Object[] resultRow) {
		final OBPF entity = new OBPF();
		
		// Key members
		final Key_OBPF key = entity.get$key();
		assignKeyValues(key, keyValues);

		assignMemberValues(entity, resultRow);
		
		return entity;
	}
	
	@Override
	public Key_OBPF constructKey(final Object[] keyValues) {
		final Key_OBPF key = new Key_OBPF();
		assignKeyValues(key, keyValues);
		return key;
	}
	
	@Override
	public void assignKeyValues(final Object object, final Object[] resultRow) {
		final Key_OBPF result = (Key_OBPF)object;
		int index = 0;
		result.setObdlp((java.lang.String)resultRow[index++]);
	}
	
	@Override
	public void assignMemberValues(final Object object, final Object[] resultRow) {
		final OBPF result = (OBPF)object;
		int index = 0;
		result.setObapp((java.lang.String)resultRow[index++]);
		result.setObbdt((java.lang.String)resultRow[index++]);
		result.setObactb((java.lang.String)resultRow[index++]);
		result.setObdpd((java.lang.String)resultRow[index++]);
		result.setObdtyf((java.lang.String)resultRow[index++]);
		result.setObiig6((java.lang.String)resultRow[index++]);
		result.setObing((java.lang.String)resultRow[index++]);
		result.setObdic((java.lang.String)resultRow[index++]);
		result.setMnt_in_bo((java.lang.String)resultRow[index++]);
		result.setObychq((java.lang.String)resultRow[index++]);
		result.setObyddb((java.lang.String)resultRow[index++]);
		result.setObysda((java.lang.String)resultRow[index++]);
		result.setObtdt((java.lang.String)resultRow[index++]);
	}

	@Override
	public Object[] getKeyMemberValues(final Object object) {
		final Key_OBPF entity = (Key_OBPF)object;
		final Object[] result = new Object[1];
		int index = 0;
		result[index++] = entity.getObdlp();
		return result;
	}

	@Override
	public Object[] getMemberValues(final Object object) {
		final OBPF entity = (OBPF)object;
		final Object[] result = new Object[13];
		int index = 0;
		result[index++] = entity.getObapp();
		result[index++] = entity.getObbdt();
		result[index++] = entity.getObactb();
		result[index++] = entity.getObdpd();
		result[index++] = entity.getObdtyf();
		result[index++] = entity.getObiig6();
		result[index++] = entity.getObing();
		result[index++] = entity.getObdic();
		result[index++] = entity.getMnt_in_bo();
		result[index++] = entity.getObychq();
		result[index++] = entity.getObyddb();
		result[index++] = entity.getObysda();
		result[index++] = entity.getObtdt();
		return result;
	}

	@Override
	public Object[] getMemberValuesForMember(final String memberName, final Object object) {
		throw new IllegalArgumentException("Not a complex member: " + memberName);
	}

	@Override
	public boolean requiresOptimisticLocking() {
		return false;
	}

	@Override
	public Object[] extractKeyValues(ResultSet resultSet) throws SQLException {
		return super.extractKeyValues(resultSet);
	}

	@Override
	public int bindKeyValues(Object[] keyValues, PreparedStatement stmt, final int startIndex) throws SQLException {
		return super.bindKeyValues(keyValues, stmt, startIndex);
	}

    @Override
	public Object getKeyFromEntity(final Object entity) {
		return (((OBPF)entity).get$key());
	}

}
