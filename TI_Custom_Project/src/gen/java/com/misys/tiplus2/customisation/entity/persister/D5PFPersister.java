package com.misys.tiplus2.customisation.entity.persister;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.misys.tiplus2.persistent.EntityPersister;
import com.misys.tiplus2.customisation.entity.D5PF;
import com.misys.tiplus2.customisation.entity.D5PF.Key_D5PF;

@SuppressWarnings("unchecked")
public class D5PFPersister extends EntityPersister {

	// This code will be generated by the builder 
	
	public D5PFPersister() {
		setKeyMembers(new MemberDescriptor[] {
            new MemberDescriptor("d5dteh", "D5PF.D5DTEH", getBinderFactory().getBinderForType("BigDecimal")),
            new MemberDescriptor("d5drr", "D5PF.D5DRR", getBinderFactory().getBinderForType("String")),
		});
			
		setMembers(new MemberDescriptor[] {
            new MemberDescriptor("d5dte", "D5PF.D5DTE", getBinderFactory().getBinderForType("BigDecimal")),
            new MemberDescriptor("d5dflg", "D5PF.D5DFLG", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("d5dlm", "D5PF.D5DLM", getBinderFactory().getBinderForType("BigDecimal")),
            new MemberDescriptor("mnt_in_bo", "D5PF.MNT_IN_BO", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("d5drar", "D5PF.D5DRAR", getBinderFactory().getBinderForType("BigDecimal")),
		});

		setForeignKeyMappings(new ForeignKeyMappingDescriptor[] {
		});
	}

    private static final String tableName = "D5PF";

    /**
     * Gets the table name - in this case D5PF
     * <p>
     * Note that the <i>schema</i> must be prefixed to this when constructing
     * SQL statements, for example: <code>schema.D5PF</code>
     * 
     * @return the table name
     */
	@Override
	public String getTableName() {       
		return tableName;
	}

	@Override
	public Class<?> getEntityClass() {
		return D5PF.class;
	}

	public Class<?> getKeyClass() {
		return Key_D5PF.class;
	}

	@Override
	public D5PF constructEntity(final Object[] keyValues, final Object[] resultRow) {
		final D5PF entity = new D5PF();
		
		// Key members
		final Key_D5PF key = entity.get$key();
		assignKeyValues(key, keyValues);

		assignMemberValues(entity, resultRow);
		
		return entity;
	}
	
	@Override
	public Key_D5PF constructKey(final Object[] keyValues) {
		final Key_D5PF key = new Key_D5PF();
		assignKeyValues(key, keyValues);
		return key;
	}
	
	@Override
	public void assignKeyValues(final Object object, final Object[] resultRow) {
		final Key_D5PF result = (Key_D5PF)object;
		int index = 0;
		result.setD5dteh((java.math.BigDecimal)resultRow[index++]);
		result.setD5drr((java.lang.String)resultRow[index++]);
	}
	
	@Override
	public void assignMemberValues(final Object object, final Object[] resultRow) {
		final D5PF result = (D5PF)object;
		int index = 0;
		result.setD5dte((java.math.BigDecimal)resultRow[index++]);
		result.setD5dflg((java.lang.String)resultRow[index++]);
		result.setD5dlm((java.math.BigDecimal)resultRow[index++]);
		result.setMnt_in_bo((java.lang.String)resultRow[index++]);
		result.setD5drar((java.math.BigDecimal)resultRow[index++]);
	}

	@Override
	public Object[] getKeyMemberValues(final Object object) {
		final Key_D5PF entity = (Key_D5PF)object;
		final Object[] result = new Object[2];
		int index = 0;
		result[index++] = entity.getD5dteh();
		result[index++] = entity.getD5drr();
		return result;
	}

	@Override
	public Object[] getMemberValues(final Object object) {
		final D5PF entity = (D5PF)object;
		final Object[] result = new Object[5];
		int index = 0;
		result[index++] = entity.getD5dte();
		result[index++] = entity.getD5dflg();
		result[index++] = entity.getD5dlm();
		result[index++] = entity.getMnt_in_bo();
		result[index++] = entity.getD5drar();
		return result;
	}

	@Override
	public Object[] getMemberValuesForMember(final String memberName, final Object object) {
		throw new IllegalArgumentException("Not a complex member: " + memberName);
	}

	@Override
	public boolean requiresOptimisticLocking() {
		return false;
	}

	@Override
	public Object[] extractKeyValues(ResultSet resultSet) throws SQLException {
		return super.extractKeyValues(resultSet);
	}

	@Override
	public int bindKeyValues(Object[] keyValues, PreparedStatement stmt, final int startIndex) throws SQLException {
		return super.bindKeyValues(keyValues, stmt, startIndex);
	}

    @Override
	public Object getKeyFromEntity(final Object entity) {
		return (((D5PF)entity).get$key());
	}

}
