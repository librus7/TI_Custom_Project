package com.misys.tiplus2.apps.ti.tistatic.extsm.entity.persister;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.misys.tiplus2.persistent.EntityPersister;
import com.misys.tiplus2.apps.ti.tistatic.extsm.entity.ExtCustomer;
import com.misys.tiplus2.apps.ti.tistatic.extsm.entity.Key_ExtCustomer;
import com.misys.tiplus2.apps.ti.tistatic.tistatic.entity.Key_branch;
import com.misys.tiplus2.apps.ti.tistatic.tistatic.entity.branch;
import com.misys.tiplus2.apps.ti.tistatic.customer.entity.Key_customer;
import com.misys.tiplus2.apps.ti.tistatic.customer.entity.customer;
import com.misys.tiplus2.enigma.customisation.entity.EnigmaCustomisedEntity.ExtraDataMap;

@SuppressWarnings("unchecked")
public class ExtCustomerPersister extends EntityPersister {

	// This code will be generated by the builder 
	
	public ExtCustomerPersister() {
		setKeyMembers(new MemberDescriptor[] {
            new MemberDescriptor("customer.SourceBankingBusiness.code", "EXTCUST.CUST_SBB", getBinderFactory().getBinderForType("String"), branch.class),
            new MemberDescriptor("customer.mnm", "EXTCUST.CUST", getBinderFactory().getBinderForType("String"), customer.class),
		});
			
		setMembers(new MemberDescriptor[] {
            new MemberDescriptor("Initialised", "EXTCUST.INITED", getBinderFactory().getBinderForType("Integer")),
            new MemberDescriptor("extraDataMap.ExtInteger", "EXTCUST.AGNTWPRC", getBinderFactory().getBinderForType("Integer")),
		});

		setForeignKeyMappings(new ForeignKeyMappingDescriptor[] {
			new ForeignKeyMappingDescriptor("customer.SourceBankingBusiness", branch.class),
			new ForeignKeyMappingDescriptor("customer", customer.class),
		});
	}

    private static final String tableName = "EXTCUST";

    /**
     * Gets the table name - in this case EXTCUST
     * <p>
     * Note that the <i>schema</i> must be prefixed to this when constructing
     * SQL statements, for example: <code>schema.EXTCUST</code>
     * 
     * @return the table name
     */
	@Override
	public String getTableName() {       
		return tableName;
	}

	@Override
	public Class<?> getEntityClass() {
		return ExtCustomer.class;
	}

	public Class<?> getKeyClass() {
		return Key_ExtCustomer.class;
	}

	@Override
	public ExtCustomer constructEntity(final Object[] keyValues, final Object[] resultRow) {
		final ExtCustomer entity = new ExtCustomer();
		
		// Key members
		final Key_ExtCustomer key = entity.get$key();
		assignKeyValues(key, keyValues);

		assignMemberValues(entity, resultRow);
		
		return entity;
	}
	
	@Override
	public Key_ExtCustomer constructKey(final Object[] keyValues) {
		final Key_ExtCustomer key = new Key_ExtCustomer();
		assignKeyValues(key, keyValues);
		return key;
	}
	
	@Override
	public void assignKeyValues(final Object object, final Object[] resultRow) {
		final Key_ExtCustomer result = (Key_ExtCustomer)object;
		int index = 0;
		result.getCustomer().getSourceBankingBusiness().getCode().setDbValue((java.lang.String)resultRow[index++]);
		result.getCustomer().getMnm().setDbValue((java.lang.String)resultRow[index++]);
	}
	
	@Override
	public void assignMemberValues(final Object object, final Object[] resultRow) {
		final ExtCustomer result = (ExtCustomer)object;
		int index = 0;
		result.getInitialised().setDbValue((java.lang.Integer)resultRow[index++]);
		result.getExtraDataMap().getExtInteger("AGNTWPRC").setDbValue((java.lang.Integer)resultRow[index++]);
	}

	@Override
	public Object[] getKeyMemberValues(final Object object) {
		final Key_ExtCustomer entity = (Key_ExtCustomer)object;
		final Object[] result = new Object[2];
		int index = 0;
		result[index++] = entity.getCustomer().getSourceBankingBusiness().getCode().getDbValue();
		result[index++] = entity.getCustomer().getMnm().getDbValue();
		return result;
	}

	@Override
	public Object[] getMemberValues(final Object object) {
		final ExtCustomer entity = (ExtCustomer)object;
		final Object[] result = new Object[2];
		int index = 0;
		result[index++] = entity.getInitialised().getDbValue();
		result[index++] = entity.getExtraDataMap().getExtInteger("AGNTWPRC").getDbValue();
		return result;
	}

	@Override
	public Object[] getMemberValuesForMember(final String memberName, final Object object) {
		if (memberName.equalsIgnoreCase("customer.SourceBankingBusiness")) {
			final Key_branch member = (Key_branch)object;
			final Object[] result = new Object[1];
			int index = 0;
			result[index++] = member.getCode().getDbValue();
			return result;
		}
		else if (memberName.equalsIgnoreCase("customer")) {
			final Key_customer member = (Key_customer)object;
			final Object[] result = new Object[2];
			int index = 0;
			result[index++] = member.getSourceBankingBusiness().getCode().getDbValue();
			result[index++] = member.getMnm().getDbValue();
			return result;
		}
		else if (memberName.equalsIgnoreCase("extraDataMap")) {
			final ExtraDataMap member = (ExtraDataMap)object;
			final Object[] result = new Object[1];
			int index = 0;
			result[index++] = member.getExtInteger("AGNTWPRC").getDbValue();
			return result;
		}
		else {
			throw new IllegalArgumentException("Invalid memberName " + memberName);
		}
	}

	@Override
	public boolean requiresOptimisticLocking() {
		return false;
	}

	@Override
	public Object[] extractKeyValues(ResultSet resultSet) throws SQLException {
		return super.extractKeyValues(resultSet);
	}

	@Override
	public int bindKeyValues(Object[] keyValues, PreparedStatement stmt, final int startIndex) throws SQLException {
		return super.bindKeyValues(keyValues, stmt, startIndex);
	}

    @Override
	public Object getKeyFromEntity(final Object entity) {
		return (((ExtCustomer)entity).get$key());
	}

}
