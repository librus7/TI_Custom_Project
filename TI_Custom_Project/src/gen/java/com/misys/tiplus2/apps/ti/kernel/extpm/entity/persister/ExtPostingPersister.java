package com.misys.tiplus2.apps.ti.kernel.extpm.entity.persister;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.misys.tiplus2.persistent.EntityPersister;
import com.misys.tiplus2.apps.ti.kernel.extpm.entity.ExtPosting;
import com.misys.tiplus2.apps.ti.kernel.extpm.entity.Key_ExtPosting;
import com.misys.tiplus2.apps.ti.finance.fincec.entity.Key_FinancingAccrualPostings;
import com.misys.tiplus2.apps.ti.finance.fincec.entity.FinancingAccrualPostings;
import com.misys.tiplus2.apps.ti.kernel.chperdc.entity.Key_PeriodicChargeAccrualPostings;
import com.misys.tiplus2.apps.ti.kernel.chperdc.entity.PeriodicChargeAccrualPostings;
import com.misys.tiplus2.apps.ti.kernel.releasc.entity.Key_ReleaseItem;
import com.misys.tiplus2.apps.ti.kernel.releasc.entity.ReleaseItem;
import com.misys.tiplus2.apps.ti.kernel.event.entity.Key_event;
import com.misys.tiplus2.apps.ti.kernel.event.entity.event;
import com.misys.tiplus2.apps.ti.kernel.master.entity.Key_master;
import com.misys.tiplus2.apps.ti.kernel.master.entity.master;
import com.misys.tiplus2.enigma.customisation.entity.EnigmaCustomisedEntity.ExtraDataMap;

@SuppressWarnings("unchecked")
public class ExtPostingPersister extends EntityPersister {

	// This code will be generated by the builder 
	
	public ExtPostingPersister() {
		setKeyMembers(new MemberDescriptor[] {
            new MemberDescriptor("key", "EXTPOSTING.KEY29", getBinderFactory().getBinderForType("Long")),
		});
			
		setMembers(new MemberDescriptor[] {
            new MemberDescriptor("typeFlag", "EXTPOSTING.TYPEFLAG", getBinderFactory().getBinderForType("Integer")),
            new MemberDescriptor("versionStamp", "EXTPOSTING.TSTAMP", getBinderFactory().getBinderForType("Integer")),
            new MemberDescriptor("FAPosting.key", "EXTPOSTING.FAPOST", getBinderFactory().getBinderForType("Long"), FinancingAccrualPostings.class),
            new MemberDescriptor("Initialised", "EXTPOSTING.INITED", getBinderFactory().getBinderForType("Integer")),
            new MemberDescriptor("InternalPostingType", "EXTPOSTING.POSTTYPE", getBinderFactory().getBinderForType("String")),
            new MemberDescriptor("PCAPosting.key", "EXTPOSTING.PCAPOST", getBinderFactory().getBinderForType("Long"), PeriodicChargeAccrualPostings.class),
            new MemberDescriptor("Posting.Key", "EXTPOSTING.POST", getBinderFactory().getBinderForType("Long"), ReleaseItem.class),
            new MemberDescriptor("event.Key", "EXTPOSTING.EVENT", getBinderFactory().getBinderForType("Long"), event.class),
            new MemberDescriptor("master.Key", "EXTPOSTING.MASTER", getBinderFactory().getBinderForType("Long"), master.class),
		});

		setForeignKeyMappings(new ForeignKeyMappingDescriptor[] {
			new ForeignKeyMappingDescriptor("PCAPosting", PeriodicChargeAccrualPostings.class),
			new ForeignKeyMappingDescriptor("Posting", ReleaseItem.class),
			new ForeignKeyMappingDescriptor("event", event.class),
			new ForeignKeyMappingDescriptor("FAPosting", FinancingAccrualPostings.class),
			new ForeignKeyMappingDescriptor("master", master.class),
		});
	}

    private static final String tableName = "EXTPOSTING";

    /**
     * Gets the table name - in this case EXTPOSTING
     * <p>
     * Note that the <i>schema</i> must be prefixed to this when constructing
     * SQL statements, for example: <code>schema.EXTPOSTING</code>
     * 
     * @return the table name
     */
	@Override
	public String getTableName() {       
		return tableName;
	}

	@Override
	public Class<?> getEntityClass() {
		return ExtPosting.class;
	}

	public Class<?> getKeyClass() {
		return Key_ExtPosting.class;
	}

	@Override
	public ExtPosting constructEntity(final Object[] keyValues, final Object[] resultRow) {
		final ExtPosting entity = new ExtPosting();
		
		// Key members
		final Key_ExtPosting key = entity.get$key();
		assignKeyValues(key, keyValues);

		assignMemberValues(entity, resultRow);
		
		return entity;
	}
	
	@Override
	public Key_ExtPosting constructKey(final Object[] keyValues) {
		final Key_ExtPosting key = new Key_ExtPosting();
		assignKeyValues(key, keyValues);
		return key;
	}
	
	@Override
	public void assignKeyValues(final Object object, final Object[] resultRow) {
		final Key_ExtPosting result = (Key_ExtPosting)object;
		int index = 0;
		result.getKey().setDbValue((java.lang.Long)resultRow[index++]);
	}
	
	@Override
	public void assignMemberValues(final Object object, final Object[] resultRow) {
		final ExtPosting result = (ExtPosting)object;
		int index = 0;
		result.setTypeFlag((java.lang.Integer)resultRow[index++]);
		result.setVersionStamp((java.lang.Integer)resultRow[index++]);
		result.getFAPosting().getKey().setDbValue((java.lang.Long)resultRow[index++]);
		result.getInitialised().setDbValue((java.lang.Integer)resultRow[index++]);
		result.getInternalPostingType().setDbValue((java.lang.String)resultRow[index++]);
		result.getPCAPosting().getKey().setDbValue((java.lang.Long)resultRow[index++]);
		result.getPosting().getKey().setDbValue((java.lang.Long)resultRow[index++]);
		result.getEvent().getKey().setDbValue((java.lang.Long)resultRow[index++]);
		result.getMaster().getKey().setDbValue((java.lang.Long)resultRow[index++]);
	}

	@Override
	public Object[] getKeyMemberValues(final Object object) {
		final Key_ExtPosting entity = (Key_ExtPosting)object;
		final Object[] result = new Object[1];
		int index = 0;
		result[index++] = entity.getKey().getDbValue();
		return result;
	}

	@Override
	public Object[] getMemberValues(final Object object) {
		final ExtPosting entity = (ExtPosting)object;
		final Object[] result = new Object[9];
		int index = 0;
		result[index++] = entity.getTypeFlag();
		result[index++] = entity.getVersionStamp();
		result[index++] = entity.getFAPosting().getKey().getDbValue();
		result[index++] = entity.getInitialised().getDbValue();
		result[index++] = entity.getInternalPostingType().getDbValue();
		result[index++] = entity.getPCAPosting().getKey().getDbValue();
		result[index++] = entity.getPosting().getKey().getDbValue();
		result[index++] = entity.getEvent().getKey().getDbValue();
		result[index++] = entity.getMaster().getKey().getDbValue();
		return result;
	}

	@Override
	public Object[] getMemberValuesForMember(final String memberName, final Object object) {
		if (memberName.equalsIgnoreCase("FAPosting")) {
			final Key_FinancingAccrualPostings member = (Key_FinancingAccrualPostings)object;
			final Object[] result = new Object[1];
			int index = 0;
			result[index++] = member.getKey().getDbValue();
			return result;
		}
		else if (memberName.equalsIgnoreCase("PCAPosting")) {
			final Key_PeriodicChargeAccrualPostings member = (Key_PeriodicChargeAccrualPostings)object;
			final Object[] result = new Object[1];
			int index = 0;
			result[index++] = member.getKey().getDbValue();
			return result;
		}
		else if (memberName.equalsIgnoreCase("Posting")) {
			final Key_ReleaseItem member = (Key_ReleaseItem)object;
			final Object[] result = new Object[1];
			int index = 0;
			result[index++] = member.getKey().getDbValue();
			return result;
		}
		else if (memberName.equalsIgnoreCase("event")) {
			final Key_event member = (Key_event)object;
			final Object[] result = new Object[1];
			int index = 0;
			result[index++] = member.getKey().getDbValue();
			return result;
		}
		else if (memberName.equalsIgnoreCase("master")) {
			final Key_master member = (Key_master)object;
			final Object[] result = new Object[1];
			int index = 0;
			result[index++] = member.getKey().getDbValue();
			return result;
		}
		else if (memberName.equalsIgnoreCase("extraDataMap")) {
			final ExtraDataMap member = (ExtraDataMap)object;
			final Object[] result = new Object[0];
			int index = 0;
			return result;
		}
		else {
			throw new IllegalArgumentException("Invalid memberName " + memberName);
		}
	}

	@Override
	public boolean requiresOptimisticLocking() {
		return true;
	}

	@Override
	public int getTypeFlag() {
		return typeFlag;
	}

	@Override
	public int[] getTypeFlags() {
		return typeFlags;
	}

	public static final int typeFlag =  25585;

	private static final int[] typeFlags =  { typeFlag,  };

	@Override
	public Object[] extractKeyValues(ResultSet resultSet) throws SQLException {
		return super.extractKeyValues(resultSet);
	}

	@Override
	public int bindKeyValues(Object[] keyValues, PreparedStatement stmt, final int startIndex) throws SQLException {
		return super.bindKeyValues(keyValues, stmt, startIndex);
	}

    @Override
	public Object getKeyFromEntity(final Object entity) {
		return (((ExtPosting)entity).get$key());
	}

}
