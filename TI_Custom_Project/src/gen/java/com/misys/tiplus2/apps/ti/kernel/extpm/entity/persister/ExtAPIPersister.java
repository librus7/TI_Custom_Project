package com.misys.tiplus2.apps.ti.kernel.extpm.entity.persister;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.misys.tiplus2.persistent.EntityPersister;
import com.misys.tiplus2.apps.ti.kernel.extpm.entity.ExtAPI;
import com.misys.tiplus2.apps.ti.kernel.extpm.entity.Key_ExtAPI;
import com.misys.tiplus2.enigma.customisation.entity.EnigmaCustomisedEntity.ExtraDataMap;

@SuppressWarnings("unchecked")
public class ExtAPIPersister extends EntityPersister {

	// This code will be generated by the builder 
	
	public ExtAPIPersister() {
		setKeyMembers(new MemberDescriptor[] {
            new MemberDescriptor("SeqNo", "EXTPMAPI.GZSEQ", getBinderFactory().getBinderForType("Integer")),
            new MemberDescriptor("WSID", "EXTPMAPI.GZWSID", getBinderFactory().getBinderForType("String")),
		});
			
		setMembers(new MemberDescriptor[] {
		});

		setForeignKeyMappings(new ForeignKeyMappingDescriptor[] {
		});
	}

    private static final String tableName = "EXTPMAPI";

    /**
     * Gets the table name - in this case EXTPMAPI
     * <p>
     * Note that the <i>schema</i> must be prefixed to this when constructing
     * SQL statements, for example: <code>schema.EXTPMAPI</code>
     * 
     * @return the table name
     */
	@Override
	public String getTableName() {       
		return tableName;
	}

	@Override
	public Class<?> getEntityClass() {
		return ExtAPI.class;
	}

	public Class<?> getKeyClass() {
		return Key_ExtAPI.class;
	}

	@Override
	public ExtAPI constructEntity(final Object[] keyValues, final Object[] resultRow) {
		final ExtAPI entity = new ExtAPI();
		
		// Key members
		final Key_ExtAPI key = entity.get$key();
		assignKeyValues(key, keyValues);

		assignMemberValues(entity, resultRow);
		
		return entity;
	}
	
	@Override
	public Key_ExtAPI constructKey(final Object[] keyValues) {
		final Key_ExtAPI key = new Key_ExtAPI();
		assignKeyValues(key, keyValues);
		return key;
	}
	
	@Override
	public void assignKeyValues(final Object object, final Object[] resultRow) {
		final Key_ExtAPI result = (Key_ExtAPI)object;
		int index = 0;
		result.getSeqNo().setDbValue((java.lang.Integer)resultRow[index++]);
		result.getWSID().setDbValue((java.lang.String)resultRow[index++]);
	}
	
	@Override
	public void assignMemberValues(final Object object, final Object[] resultRow) {
		final ExtAPI result = (ExtAPI)object;
		int index = 0;
	}

	@Override
	public Object[] getKeyMemberValues(final Object object) {
		final Key_ExtAPI entity = (Key_ExtAPI)object;
		final Object[] result = new Object[2];
		int index = 0;
		result[index++] = entity.getSeqNo().getDbValue();
		result[index++] = entity.getWSID().getDbValue();
		return result;
	}

	@Override
	public Object[] getMemberValues(final Object object) {
		final ExtAPI entity = (ExtAPI)object;
		final Object[] result = new Object[0];
		int index = 0;
		return result;
	}

	@Override
	public Object[] getMemberValuesForMember(final String memberName, final Object object) {
		if (memberName.equalsIgnoreCase("extraDataMap")) {
			final ExtraDataMap member = (ExtraDataMap)object;
			final Object[] result = new Object[0];
			int index = 0;
			return result;
		}
		else {
			throw new IllegalArgumentException("Invalid memberName " + memberName);
		}
	}

	@Override
	public boolean requiresOptimisticLocking() {
		return false;
	}

	@Override
	public Object[] extractKeyValues(ResultSet resultSet) throws SQLException {
		return super.extractKeyValues(resultSet);
	}

	@Override
	public int bindKeyValues(Object[] keyValues, PreparedStatement stmt, final int startIndex) throws SQLException {
		return super.bindKeyValues(keyValues, stmt, startIndex);
	}

    @Override
	public Object getKeyFromEntity(final Object entity) {
		return (((ExtAPI)entity).get$key());
	}

}
